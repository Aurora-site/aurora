---
import Footer from "./footer.astro";
import Header from "./header.astro";
import "../styles/styles.css";
import "../styles/tailwind.css";
import { useAstroLocale, useAstroTranslations } from "../i18n/utils";
const t = useAstroTranslations(Astro);
const lang = useAstroLocale(Astro);
import { DEPLOY_URL, ENV_NAME } from "astro:env/client";
import YaMetrica from "../components/utils/YaMetrica.astro";

const {
  title = "Прогноз Северного сияния",
  description = "Поймай Аврору!",
  variant: propVariant,
} = Astro.props;

const path = Astro.url.pathname;

const segments = path.split("/").filter(Boolean);
let langPrefix = null;

if (["en", "cn"].includes(segments[0])) {
  langPrefix = segments[0];
  segments.shift();
}

const cleanPath = "/" + segments.join("/");

let autoVariant: "default" | "app" | "blog" = "default";

if (cleanPath.startsWith("/app")) {
  autoVariant = "app";
} else if (cleanPath.startsWith("/blog")) {
  autoVariant = "blog";
}
const variant = propVariant ?? autoVariant;
---

<html lang={lang} class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="icon" type="image/ico" href="/favicon.ico" />
    <meta property="og:url" content={DEPLOY_URL} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={t("meta.ogTitle")} />
    <meta property="og:description" content={t("meta.ogDescription")} />
    <meta property="og:locale" content={lang} />
    <meta property="og:image" content={DEPLOY_URL + "/openGraph.jpg"} />
    <meta property="og:image:width" content="1280" />
    <meta property="og:image:width" content="731" />

    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    {ENV_NAME === "main" ? <YaMetrica /> : <meta content="YaMetrica off" />}
  </head>
  <body>
    <Header variant={variant} />
    <div class="bg-[radial-gradient(circle,black,#202731_80%,#5E666E_100%)]">
      <div class="container">
        <slot />
      </div>
    </div>
    <Footer />

    <script is:inline>
      const scrollToHash = () => {
        const hash = window.location.hash;
        if (!hash) return;

        const el = document.querySelector(hash);
        if (!el) return;

        const header = document.querySelector(".header");
        const headerOffset = header?.offsetHeight || 0;

        let lastY = -1;
        let attempts = 0;
        const maxAttempts = 30;

        const fixScroll = () => {
          const y =
            el.getBoundingClientRect().top + window.pageYOffset - headerOffset;
          if (y !== lastY) {
            window.scrollTo({ top: y });
            lastY = y;
          }

          if (attempts++ < maxAttempts) {
            requestAnimationFrame(fixScroll);
          }
        };

        requestAnimationFrame(fixScroll);
      };

      window.addEventListener("load", scrollToHash);
      window.addEventListener("hashchange", scrollToHash);
    </script>
  </body>
</html>
